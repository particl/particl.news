{"version":3,"sources":["webpack:///./gatsby-theme-particl-ghost/src/templates/page.js"],"names":["Page","data","location","page","ghostPage","featImg","featureImageSharp","publicURL","feature_image","postClass","childImageSharp","fluid","PostClass","tags","isPage","isImage","htmlAst","childHtmlRehype","transformedHtml","html","Fragment","type","codeinjection_styles","render","overlay","header","className","title"],"mappings":"4FAAA,mFAiEeA,UAhDF,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACZC,EAAOF,EAAKG,UACZC,EAAUF,EAAKG,mBAAqBH,EAAKG,kBAAkBC,WAAaJ,EAAKK,cAE7EC,GADkBN,EAAKG,mBAAqBH,EAAKG,kBAAkBI,iBAAmBP,EAAKG,kBAAkBI,gBAAgBC,MACjHC,YAAU,CAAEC,KAAMV,EAAKU,KAAMC,OAAQX,IAAQ,EAAMY,QAASV,IAAW,KAEnFW,EAAUb,EAAKc,iBAAmBd,EAAKc,gBAAgBD,QACvDE,EAAkBf,EAAKc,iBAAmBd,EAAKc,gBAAgBE,KAErE,OACI,wBAAC,UAAMC,SAAP,KACI,wBAAC,IAAD,CAAUnB,KAAMA,EAAMC,SAAUA,EAAUmB,KAAK,YAC/C,wBAAC,IAAD,KACI,iCAAOA,KAAK,YAAZ,GAA2BlB,EAAKmB,uBAEpC,wBAAC,IAAD,CAAkBC,OAAS,SAAAC,GAAO,OAC9B,wBAAC,IAAD,CAAQrB,KAAMA,EAAMU,KAAMV,EAAKU,KAAMY,OAAQ,wBAAC,IAAD,CAAYD,QAASA,IAAYA,QAASA,GACnF,+BAAKE,UAAU,oBACX,mCAASA,UAAS,wBAA0BjB,GACxC,kCAAQiB,UAAU,oBACd,8BAAIA,UAAU,mBAAmBvB,EAAKwB,QAU1C,mCAASD,UAAU,gCACf,wBAAC,IAAD,CAAeV,QAASA,EAASG,KAAMD,GAAmBf,EAAKgB","file":"component---gatsby-theme-particl-ghost-src-templates-page-js-ae39956905b9f0ab86a8.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { graphql } from 'gatsby'\nimport { Helmet } from 'react-helmet'\n\nimport { HeaderPage, Layout, ImgSharp, RenderContent } from '../components/common'\nimport { OverlayContainer } from '../components/common/effects'\n\nimport { PostClass } from '../components/common/helpers'\nimport { MetaData } from '../components/common/meta'\n\n/**\n* Single page (/:slug)\n*\n* This file renders a single page and loads all the content.\n*\n*/\nconst Page = ({ data, location }) => {\n    const page = data.ghostPage\n    const featImg = page.featureImageSharp && page.featureImageSharp.publicURL || page.feature_image\n    const fluidFeatureImg = page.featureImageSharp && page.featureImageSharp.childImageSharp && page.featureImageSharp.childImageSharp.fluid\n    const postClass = PostClass({ tags: page.tags, isPage: page && true, isImage: featImg && true })\n\n    const htmlAst = page.childHtmlRehype && page.childHtmlRehype.htmlAst\n    const transformedHtml = page.childHtmlRehype && page.childHtmlRehype.html\n\n    return (\n        <React.Fragment>\n            <MetaData data={data} location={location} type=\"website\"/>\n            <Helmet>\n                <style type=\"text/css\">{`${page.codeinjection_styles}`}</style>\n            </Helmet>\n            <OverlayContainer render={ overlay => (\n                <Layout page={page} tags={page.tags} header={<HeaderPage overlay={overlay}/>} overlay={overlay}>\n                    <div className=\"inner intemppage\">\n                        <article className={`post-full intemppage ${postClass}`}>\n                            <header className=\"post-full-header\">\n                                <h1 className=\"post-full-title\">{page.title}</h1>\n                            </header>\n\n                           {/*  { featImg &&\n                                 <figure className=\"post-full-image intemppage\">\n                                    <ImgSharp fluidClass=\"kg-card kg-code-card\" fluidImg={fluidFeatureImg} srcImg={featImg} title={page.title} />\n                                 </figure>\n                                } */}\n\n                            {/* The main page content */}\n                            <section className=\"post-full-content intemppage\">\n                                <RenderContent htmlAst={htmlAst} html={transformedHtml || page.html} />\n                            </section>\n                        </article>\n                    </div>\n                </Layout>\n            )}/>\n        </React.Fragment>\n    )\n}\n\nPage.propTypes = {\n    data: PropTypes.shape({\n        ghostPage: PropTypes.object.isRequired,\n    }).isRequired,\n    location: PropTypes.object.isRequired,\n}\n\nexport default Page\n\nexport const postQuery = graphql`\n    query($slug: String!) {\n        ghostPage(slug: { eq: $slug }) {\n            ...GhostPageFields\n        }\n    }\n`\n"],"sourceRoot":""}