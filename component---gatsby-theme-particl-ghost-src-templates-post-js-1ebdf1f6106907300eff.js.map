{"version":3,"sources":["webpack:///./gatsby-theme-particl-ghost/src/templates/post.js"],"names":["Post","data","location","pageContext","basePath","useOptions","text","get","useLang","post","ghostPost","prevPost","prev","nextPost","next","previewPosts","allGhostPost","edges","readingTime","readingTimeHelper","replace","featImg","featureImageSharp","publicURL","feature_image","postClass","childImageSharp","fluid","PostClass","tags","isFeatured","isImage","primaryTagCount","toc","childHtmlRehype","tableOfContents","htmlAst","transformedHtml","html","forEach","node","collectionPath","collectionPaths","id","Fragment","type","codeinjection_styles","throttle","isPost","activeClass","render","sticky","overlay","header","title","primaryTag","primary_tag","posts","className","to","resolveUrl","slug","url","name","ref","anchorRef","custom_excerpt","dateTime","published_at","published_at_pretty"],"mappings":"8FAAA,+IA0IeA,UAjHF,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,YACpBC,EAAaC,cAAbD,SACFE,EAAOC,YAAIC,eACXC,EAAOR,EAAKS,UACZC,EAAWV,EAAKW,KAChBC,EAAWZ,EAAKa,KAChBC,EAAed,EAAKe,aAAaC,MACjCC,EAAcC,YAAkBV,GAAMW,QAAxB,WAA2Cd,EAAK,aAC9De,EAAUZ,EAAKa,mBAAqBb,EAAKa,kBAAkBC,WAAad,EAAKe,cAE7EC,GADkBhB,EAAKa,mBAAqBb,EAAKa,kBAAkBI,iBAAmBjB,EAAKa,kBAAkBI,gBAAgBC,MACjHC,YAAU,CAAEC,KAAMpB,EAAKoB,KAAMC,WAAYT,EAASU,QAASV,IAAW,KAClFW,EAAkB7B,EAAY6B,gBAE9BC,EAAMxB,EAAKyB,iBAAmBzB,EAAKyB,gBAAgBC,iBAAmB,GACtEC,EAAU3B,EAAKyB,iBAAmBzB,EAAKyB,gBAAgBE,QACvDC,EAAkB5B,EAAKyB,iBAAmBzB,EAAKyB,gBAAgBI,KAWrE,OARAvB,EAAawB,SAAQ,gBAAGC,EAAH,EAAGA,KAAH,OAAcA,EAAKC,eAAiBtC,EAAYuC,gBAAgBF,EAAKG,OACtFhC,IACAA,EAAS8B,eAAiBtC,EAAYuC,gBAAgB/B,EAASgC,KAE/D9B,IACAA,EAAS4B,eAAiBtC,EAAYuC,gBAAgB7B,EAAS8B,KAI/D,wBAAC,UAAMC,SAAP,KACI,wBAAC,IAAD,CAAU3C,KAAMA,EAAMC,SAAUA,EAAU2C,KAAK,YAC/C,wBAAC,IAAD,KACI,iCAAOA,KAAK,YAAZ,GAA2BpC,EAAKqC,uBAEpC,wBAAC,IAAD,CAAoBC,SAAU,IAAKC,QAAQ,EAAMC,YAAY,wBAAwBC,OAAS,SAAAC,GAAM,OAChG,wBAAC,IAAD,CAAkBD,OAAS,SAAAE,GAAO,OAC9B,wBAAC,IAAD,CAAQJ,QAAQ,EAAMG,OAAQA,EAAQC,QAASA,EAC3CC,OAAQ,wBAAC,IAAD,CAAYF,OAAQA,EAAQG,MAAO7C,EAAK6C,MAAOF,QAASA,IAChErC,aAAc,wBAAC,IAAD,CAAcwC,WAAY9C,EAAK+C,YAAaxB,gBAAiBA,EAAiByB,MAAO1C,EAAcH,KAAMD,EAAUG,KAAMD,KACvI,+BAAK6C,UAAU,SACX,mCAASA,UAAS,wBAA0BjC,GACxC,kCAAQiC,UAAU,+BACZjD,EAAK+C,aACC,mCAASE,UAAU,6BACf,wBAAC,OAAD,CAAMC,GAAIC,qBAAWxD,EAAD,IAAgBK,EAAK+C,YAAYK,KAAMpD,EAAK+C,YAAYM,MAAOrD,EAAK+C,YAAYO,OAIhH,8BAAIC,IAAKb,GAAUA,EAAOc,UAAWP,UAAU,8BAA8BjD,EAAK6C,OAEhF7C,EAAKyD,gBACH,6BAAGR,UAAU,uCAAuCjD,EAAKyD,gBAG7D,+BAAKR,UAAU,+BACX,mCAASA,UAAU,4BAaX,mCAASA,UAAU,yBACnB,+BAAKA,UAAU,uBACX,gCAAMA,UAAU,mBAAmBS,SAAU1D,EAAK2D,cAC7C3D,EAAK4D,oBADV,KAGA,gCAAMX,UAAU,uBAAsB,gCAAMA,UAAU,QAAhB,KAAtC,IAA4ExC,QAahG,mCAASwC,UAAU,gCACf,wBAAC,IAAD,CAAiBzB,IAAKA,EAAK6B,IAAKF,qBAAWxD,EAAUD,EAAYuC,gBAAgBjC,EAAKkC,IAAKlC,EAAKoD,KAAMpD,EAAKqD,OAC3G,wBAAC,IAAD,CAAe1B,QAASA,EAASE,KAAMD,GAAmB5B,EAAK6B,QAGnE,wBAAC,IAAD,MAEA,wBAAC,IAAD,CAAUK,GAAIlC,EAAKkC","file":"component---gatsby-theme-particl-ghost-src-templates-post-js-1ebdf1f6106907300eff.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link, graphql } from 'gatsby'\nimport { Helmet } from 'react-helmet'\n\nimport { readingTime as readingTimeHelper } from '@tryghost/helpers'\nimport { resolveUrl } from '../utils/routing'\nimport useOptions from '../utils/use-options'\nimport { useLang, get } from '../utils/use-lang'\n\nimport { Layout, HeaderPost, AuthorList, PreviewPosts, ImgSharp, RenderContent } from '../components/common'\nimport { Comments, TableOfContents, Subscribe } from '../components/common'\n\nimport { StickyNavContainer, OverlayContainer } from '../components/common/effects'\nimport { MetaData } from '../components/common/meta'\n\nimport { PostClass } from '../components/common/helpers'\n\n\n/**\n* Single post view (/:slug)\n*\n* This file renders a single post and loads all the content.\n*\n*/\nconst Post = ({ data, location, pageContext }) => {\n    const { basePath } = useOptions()\n    const text = get(useLang())\n    const post = data.ghostPost\n    const prevPost = data.prev\n    const nextPost = data.next\n    const previewPosts = data.allGhostPost.edges\n    const readingTime = readingTimeHelper(post).replace(`min read`,text(`MIN_READ`))\n    const featImg = post.featureImageSharp && post.featureImageSharp.publicURL || post.feature_image\n    const fluidFeatureImg = post.featureImageSharp && post.featureImageSharp.childImageSharp && post.featureImageSharp.childImageSharp.fluid\n    const postClass = PostClass({ tags: post.tags, isFeatured: featImg, isImage: featImg && true })\n    const primaryTagCount = pageContext.primaryTagCount\n\n    const toc = post.childHtmlRehype && post.childHtmlRehype.tableOfContents || []\n    const htmlAst = post.childHtmlRehype && post.childHtmlRehype.htmlAst\n    const transformedHtml = post.childHtmlRehype && post.childHtmlRehype.html\n\n    // Collection paths must be retrieved from pageContext\n    previewPosts.forEach(({ node }) => node.collectionPath = pageContext.collectionPaths[node.id])\n    if (prevPost) {\n        prevPost.collectionPath = pageContext.collectionPaths[prevPost.id]\n    }\n    if (nextPost) {\n        nextPost.collectionPath = pageContext.collectionPaths[nextPost.id]\n    }\n\n    return (\n        <React.Fragment>\n            <MetaData data={data} location={location} type=\"article\"/>\n            <Helmet>\n                <style type=\"text/css\">{`${post.codeinjection_styles}`}</style>\n            </Helmet>\n            <StickyNavContainer throttle={300} isPost={true} activeClass=\"nav-post-title-active\" render={ sticky => (\n                <OverlayContainer render={ overlay => (\n                    <Layout isPost={true} sticky={sticky} overlay={overlay}\n                        header={<HeaderPost sticky={sticky} title={post.title} overlay={overlay}/>}\n                        previewPosts={<PreviewPosts primaryTag={post.primary_tag} primaryTagCount={primaryTagCount} posts={previewPosts} prev={prevPost} next={nextPost}/>}>\n                        <div className=\"inner\">\n                            <article className={`post-full intemppost ${postClass}`}>\n                                <header className=\"post-full-header intemppost\">\n                                    { post.primary_tag &&\n                                            <section className=\"post-full-tags intemppost\">\n                                                <Link to={resolveUrl(basePath, `/`, post.primary_tag.slug, post.primary_tag.url)}>{post.primary_tag.name}</Link>\n                                            </section>\n                                    }\n\n                                    <h1 ref={sticky && sticky.anchorRef} className=\"post-full-title intemppost\">{post.title}</h1>\n\n                                    { post.custom_excerpt &&\n                                        <p className=\"post-full-custom-excerpt intemppost\">{post.custom_excerpt}</p>\n                                    }\n\n                                    <div className=\"post-full-byline intemppost\">\n                                        <section className=\"post-full-byline-content\">\n                                            {/* <AuthorList authors={post.authors} isPost={true}/> */}\n\n                                             {/*<section className=\"post-full-byline-meta\">\n                                                <h4 className=\"author-name\">\n                                                    {post.authors.map((author, i) => (\n                                                        <>\n                                                            {i > 0 ? `, ` : ``}\n                                                            <Link key={i} to={resolveUrl(basePath, `/`, author.slug, author.url)}>{author.name}</Link>\n                                                        </>\n                                                    ))}\n                                                </h4>\n                                                */}\n                                                <section className=\"post-full-byline-meta\">\n                                                <div className=\"byline-meta-content\">\n                                                    <time className=\"byline-meta-date\" dateTime={post.published_at}>\n                                                        {post.published_at_pretty}&nbsp;\n                                                    </time>\n                                                    <span className=\"byline-reading-time\"><span className=\"bull\">&bull;</span> {readingTime}</span>\n                                                </div>\n                                            </section>\n                                        </section>\n                                    </div>\n                                </header>\n\n                               {/*   { featImg &&\n                                    <figure className=\"post-full-image intemppost\">\n                                        <ImgSharp fluidClass=\"kg-card kg-code-card\" fluidImg={fluidFeatureImg} srcImg={featImg} title={post.title}/>\n                                    </figure>\n                                } */}\n\n                                <section className=\"post-full-content intemppost\">\n                                    <TableOfContents toc={toc} url={resolveUrl(basePath, pageContext.collectionPaths[post.id], post.slug, post.url)}/>\n                                    <RenderContent htmlAst={htmlAst} html={transformedHtml || post.html} />\n                                </section>\n\n                                <Subscribe />\n\n                                <Comments id={post.id}/>\n\n                            </article>\n                        </div>\n                    </Layout>\n                )}/>\n            )}/>\n        </React.Fragment>\n    )\n}\n\nPost.propTypes = {\n    data: PropTypes.shape({\n        ghostPost: PropTypes.object.isRequired,\n        prev: PropTypes.object,\n        next: PropTypes.object,\n        allGhostPost: PropTypes.object.isRequired,\n    }).isRequired,\n    location: PropTypes.object.isRequired,\n    pageContext: PropTypes.object,\n}\n\nexport default Post\n\nexport const postQuery = graphql`\n    query($slug: String!, $prev: String!, $next: String!, $tag: String!, $limit: Int!, $skip: Int!) {\n        ghostPost: ghostPost(slug: { eq: $slug }) {\n            ...GhostPostFields\n        }\n        prev: ghostPost(slug: { eq: $prev }) {\n            ...GhostPostFieldsForIndex\n        }\n        next: ghostPost(slug: { eq: $next }) {\n            ...GhostPostFieldsForIndex\n        }\n        allGhostPost(\n            filter: {slug: { ne: $slug },tags: {elemMatch: {slug: {eq: $tag}}}},\n            limit: $limit,\n            skip: $skip,\n            sort: { fields: [featured, published_at], order: [DESC, DESC] }\n        ) {\n            edges {\n                node {\n                ...GhostPostFieldsForIndex\n                }\n            }\n        }\n    }\n`\n"],"sourceRoot":""}